name: Test & Build Docker

on:
  push:
    # Build Docker images on push to develop or master
    branches:
      - develop

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  IMAGE_NAME_BACKEND: casterdashboard2-backend
  IMAGE_NAME_FRONTEND: casterdashboard2-frontend
  IMAGE_NAME_NGINX: casterdashboard2-nginx

jobs:

  test-backend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379  

    steps:
      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup poetry
        working-directory: ./backend
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
          $HOME/.poetry/bin/poetry config virtualenvs.in-project true

      - name: Install dependencies
        working-directory: ./backend
        run: |
          $HOME/.poetry/bin/poetry install
          cp .env.testing .env

      - name: Run Django tests
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          pytest -vv


  build-backend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && ${{ github.actor != 'dependabot[bot]' }}
    needs: test-backend

    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_BACKEND
        working-directory: ./backend

      - name: Log into registry
        run: echo "${{ secrets.GHCR_ACCESS_TOKEN }}" | docker login ghcr.io -u sthorsten --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/sthorsten/$IMAGE_NAME_BACKEND
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention if the branch is master
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME_BACKEND $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  build-frontend:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && ${{ github.actor != 'dependabot[bot]' }}
    needs: test-backend

    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_FRONTEND
        working-directory: ./frontend

      - name: Log into registry
        run: echo "${{ secrets.GHCR_ACCESS_TOKEN }}" | docker login ghcr.io -u sthorsten --password-stdin
        working-directory: ./frontend

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/sthorsten/$IMAGE_NAME_FRONTEND
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention if the branch is master
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME_FRONTEND $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
        working-directory: ./frontend

  build-nginx:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && ${{ github.actor != 'dependabot[bot]' }}
    needs: test-backend

    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME_NGINX
        working-directory: ./docker-nginx

      - name: Log into registry
        run: echo "${{ secrets.GHCR_ACCESS_TOKEN }}" | docker login ghcr.io -u sthorsten --password-stdin
        working-directory: ./docker-nginx

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/sthorsten/$IMAGE_NAME_NGINX
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention if the branch is master
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME_NGINX $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
        working-directory: ./docker-nginx